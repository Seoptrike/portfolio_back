<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.backend.mapper.ProjectMapper">

    <resultMap id="ProjectJoinMap" type="com.backend.domain.project.ProjectResponseDTO">
        <id property="projectId" column="project_id"/>
        <result property="title" column="title"/>
        <result property="description" column="description"/>
        <result property="startDate" column="start_date"/>
        <result property="endDate" column="end_date"/>
        <result property="githubUrl" column="github_url"/>
        <result property="deployUrl" column="deploy_url"/>
        <result property="notionUrl" column="notion_url"/>
        <result property="thumbnailUrl" column="thumbnail_url"/>
        <result property="thumbnailFileId" column="thumbnail_file_id"/>
        <!-- ★ TechStacksVO: stackId, name, categoryId 만 매핑 -->
        <collection property="stackNames" ofType="com.backend.domain.stack.TechStacksVO">
            <id property="stackId" column="s_stack_id"/>
            <result property="name" column="s_name"/>
            <result property="categoryId" column="s_category_id"/>
        </collection>
    </resultMap>

    <!-- === CRUD === -->
    <insert id="insertProject" parameterType="com.backend.domain.project.ProjectsVO"
            useGeneratedKeys="true" keyProperty="projectId">
        INSERT INTO projects
        (user_id, title, description, start_date, end_date, github_url, deploy_url, notion_url, thumbnail_url, thumbnail_file_id)
        VALUES (#{userId}, #{title}, #{description}, #{startDate}, #{endDate}, #{githubUrl}, #{deployUrl}, #{notionUrl},#{thumbnailUrl},#{thumbnailFileId})
    </insert>

    <update id="updateProject" parameterType="com.backend.domain.project.ProjectsVO">
        UPDATE projects
        SET title         = #{title},
            description   = #{description},
            start_date    = #{startDate},
            end_date      = #{endDate},
            github_url    = #{githubUrl},
            deploy_url    = #{deployUrl},
            notion_url    = #{notionUrl},
            thumbnail_url = #{thumbnailUrl},
            thumbnail_file_id = #{thumbnailFileId}
        WHERE project_id = #{projectId}
    </update>

    <delete id="deleteProject" parameterType="int">
        DELETE
        FROM projects
        WHERE project_id = #{projectId}
    </delete>

    <delete id="deleteProjectStacks" parameterType="int">
        DELETE
        FROM project_stack
        WHERE project_id = #{projectId}
    </delete>

    <insert id="insertProjectStacks">
        INSERT INTO project_stack (project_id, stack_id)
        VALUES
        <foreach collection="stackIds" item="sid" separator=",">
            (#{projectId}, #{sid})
        </foreach>
    </insert>

    <select id="selectProjectsByUserId" resultMap="ProjectJoinMap">
        SELECT p.project_id,
               p.title,
               p.description,
               p.start_date,
               p.end_date,
               p.github_url,
               p.deploy_url,
               p.notion_url,
               p.thumbnail_url,
               p.thumbnail_file_id,
               s.stack_id    AS s_stack_id,
               s.name        AS s_name,
               s.category_id AS s_category_id
        FROM projects p
                 LEFT JOIN project_stack ps ON ps.project_id = p.project_id
                 LEFT JOIN tech_stacks s ON s.stack_id = ps.stack_id
        WHERE p.user_id = #{userId}
        ORDER BY p.end_date DESC NULLS FIRST, p.start_date DESC, s.name
    </select>

    <select id="selectProjectById" resultMap="ProjectJoinMap">
        SELECT p.project_id,
               p.title,
               p.description,
               p.start_date,
               p.end_date,
               p.github_url,
               p.deploy_url,
               p.notion_url,
               p.thumbnail_url,
               p.thumbnail_file_id,
               s.stack_id    AS s_stack_id,
               s.name        AS s_name,
               s.category_id AS s_category_id
        FROM projects p
                 LEFT JOIN project_stack ps ON ps.project_id = p.project_id
                 LEFT JOIN tech_stacks s ON s.stack_id = ps.stack_id
        WHERE p.project_id = #{projectId}
        ORDER BY s.name
    </select>

    <select id="getProjectByProjectId" resultType="com.backend.domain.project.ProjectsVO">
        SELECT *
        FROM projects
        WHERE project_id = #{projectId}
    </select>

</mapper>
